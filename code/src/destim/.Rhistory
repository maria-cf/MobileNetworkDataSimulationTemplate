for (devID in deviceIDs){
model <- read.csv(file.path(path_postLoc, paste0('postLocJointProb_', geolocation_model, '_', emission_model,
'-', geolocation_prior, '_', devID, '.csv')))
mat <- model[, 4:5]
mat[2, ] <- -1 * mat[2,]
max_NonDiagonalTerm <- max(model[which(colSums(mat) != 0)])
isDiagonal[devID] <- (max_NonDiagonalTerm < 1e-7)
}
model <- read.csv(file.path(path_postLoc, paste0('postLocJointProb_', geolocation_model, '_', emission_model,
'-', geolocation_prior, '_', devID, '.csv')))
mat <- model[, 4:5]
mat[2, ] <- -1 * mat[2,]
max_NonDiagonalTerm <- max(model[which(colSums(mat) != 0)])
path_data <- '/Users/Maria/Desktop/Root/MobileNetworkDataSimulationTemplate/data'
library(data.table)
library(ggplot2)
library(gganimate)
install.packages('data.table')
install.packages("data.table")
library(data.table)
install.packages("gganimate")
library(gganimate)
msd.dt <- fread(file.path(path_data, 'msdTotal.dt.csv'), sep = ',')[
, V1 := NULL][
, model := NULL]
cp_tp.dt <- dcast(msd.dt, formula = device + time + isDiagonal ~ method, value.var = 'cp_tp')
setnames(cp_tp.dt, c('RSS', 'RSS_TA'), paste0('cp_tp', c('_RSS', '_RSS_TA')))
devIDs <- unique(cp_tp.dt$device)
devID <- devIDs[1:25]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devIDs
View(msd.dt)
View(cp_tp.dt)
View(p)
devID <- devIDs[1]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[8]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[9]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[11]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[12]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[13]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[15]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[16]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[17]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[18]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[20]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[21]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[23]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[22]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devID <- devIDs[25]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
devIDs='160'
devIDs <- unique(cp_tp.dt$device)
devIDs('160')
devID <- devIDs[143]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
ggplot(data = msd_nonDiagonalTotal.dt,
mapping = aes(x = model,
y = cp_tp / tile_size,
fill = method)) +
geom_boxplot() +
theme_bw() +
labs(x = '', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '')
ggplot(msd.dt, aes(x = time, y = cp_tp / tile_size, group = time)) +
geom_boxplot(aes(fill = model)) +
facet_grid(model ~ . ) +
theme_bw() +
labs(x = '\nTime (s)', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '') +
theme(plot.title = element_text(hjust = 0.5, size = 18),
axis.title.x = element_text(size = 16),axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16), axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14), legend.text = element_text(size = 12),
legend.position = 'none')
path_root         <- '/Users/Maria/Desktop/Root/MobileNetworkDataSimulationTemplate'
path_source       <- file.path(path_root, 'code/src')
path_simConfig    <- file.path(path_root, 'data/simulatorConfig')
path_events       <- file.path(path_root, 'data/networkEvents')
path_eventLoc     <- file.path(path_root, 'data/eventLocProb_vTA')
path_resources    <- file.path(path_root, 'param/resources')
path_processParam <- file.path(path_root, 'param/process')
path_postLoc      <- file.path(path_root, 'data/postLocProb_vTA')
path_img          <- file.path(path_root, 'metrics/img')
path_grTruth      <- file.path(path_root, 'param/groundTruth')
library(data.table)           # manage data
library(tmap)
library(mobvis)
library(mobloc)
library(xml2)
library(magrittr)
library(tibble)
library(tidyr)
library(stringr)
library(rgeos)
library(deduplication)
library(ggplot2)
library(latex2exp)
source(file.path(path_source, 'get_simConfig.R'))
# Function get_simScenario to read the output files of the simulator
source(file.path(path_source, 'get_simScenario.R'))
# Function tileEquivalence to compute the equivalence between rastercell (R) and tiles (simulator)
source(file.path(path_source, 'tileEquivalence.R'))
# Function to fit and compute HMM model with the events of a specific device
source(file.path(path_source, 'compute_HMM.R'))
# Function to transform de output of compute_HMM
source(file.path(path_source, 'transform_postLoc.R'))
# Function to fit static model with uniform and network priors
source(file.path(path_source, 'compute_staticModel.R'))
# Function to compute center of probabilities (to be merged with that from deduplication)
source(file.path(path_source, 'cp.R'))
# Function to compute radius of dispersion
source(file.path(path_source, 'rd.R'))
parameters.xml    <- as_list(read_xml(file.path(path_processParam, "parameters_process.xml")))
geolocation_model <- parameters.xml$process_parameters$geolocation$model_name[[1]]
geolocation_prior <- parameters.xml$process_parameters$geolocation$prior[[1]]
emission_model    <- parameters.xml$process_parameters$geolocation$emission_model[[1]]
transition_model  <- parameters.xml$process_parameters$geolocation$transition_model[[1]]
simConfigParam.list <- get_simConfig(path_simConfig)
# time
times       <- simConfigParam.list$simConfigParameters$times
t_increment <- simConfigParam.list$simConfigParameters$t_increment
# grid
fileGridName       <- file.path(path_resources, simConfigParam.list$filesNames$fileGridName)
fileEventsInfoName <- file.path(path_events, simConfigParam.list$filesNames$fileEventsInfoName)
simScenario.list   <- get_simScenario(fileGridName = fileGridName, fileEventsInfoName = fileEventsInfoName)
gridParam  <- simScenario.list$gridParam
ncol_grid  <- gridParam[['No Tiles Y']]
nrow_grid  <- gridParam[['No Tiles X']]
tile_sizeX <- gridParam[['X Tile Dim']]
tile_sizeY <- gridParam[['Y Tile Dim']]
tile_size  <- mean(c(tile_sizeX, tile_sizeY))
ntiles_x   <- gridParam[['No Tiles X']]
ntiles_y   <- gridParam[['No Tiles Y']]
ntiles     <- ntiles_x * ntiles_y
# tile-rasterCell equivalence
tileEquiv.dt <- simScenario.list$tileEquiv.dt
# RSS and other network parameters
RSS.dt <- fread(file.path(path_resources, 'RSS.csv'),
colClasses = c('numeric', 'character', 'numeric', 'character', 'integer',
'numeric', 'numeric', 'numeric', 'numeric', 'numeric',
'integer', 'numeric'))
# Network event data
events.dt    <- simScenario.list$events.dt
# Centroid coordinates of each tile
centroidCoord.dt <- fread(file.path(path_resources, 'centroidCoord.csv'))
# True positions of each device
truePositions_device.dt <- fread(file.path(path_grTruth, 'truePositions_device.csv'))
# Posterior location probabilities
postLocProb.dt <- fread(file.path(path_postLoc, paste0('postLocProb_', geolocation_model, '_RSS_TA-', geolocation_prior, '.csv')))
postLocProb.dt <- merge(postLocProb.dt, centroidCoord.dt, by = 'tile')
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####      CENTER OF PROBABILITY AND ROOT MEAN SQUARED DISPERSION            ####
#### ** Bias                                                                ####
cp_truePos.dt <- postLocProb.dt[
, as.list(cp(x = centroidCoord_x, y = centroidCoord_y, w = postLocProb)), by = c('device', 'time')][
truePositions_device.dt[, .(time, device, x, y)], on = c('device', 'time')][
, cp_tp := sqrt( (cp_x - x)**2 + (cp_y - y)**2)][
, .(device, time, cp_tp)][
order(device, time)]
#### ** rmsd                                                                ####
rmsd.dt <- postLocProb.dt[
, list(rd = rd(x = centroidCoord_x, y = centroidCoord_y, w = postLocProb)), by = c('device', 'time')]
msd.dt <- merge(cp_truePos.dt, rmsd.dt, by = c('device', 'time'))
msd.dt[
, msd := cp_tp**2 + rd**2][
, model := paste0(geolocation_model, '-', geolocation_prior)]
msd_nonDiagonalTotal.dt = rbind(msd_nonDiagonal.dt,msdTA_nonDiagonal.dt)
source(file.path(path_source, 'get_simConfig.R'))
# Function get_simScenario to read the output files of the simulator
source(file.path(path_source, 'get_simScenario.R'))
# Function tileEquivalence to compute the equivalence between rastercell (R) and tiles (simulator)
source(file.path(path_source, 'tileEquivalence.R'))
simConfigParam.list <- get_simConfig(path_simConfig)
# grid
fileGridName       <- file.path(path_resources, simConfigParam.list$filesNames$fileGridName)
fileEventsInfoName <- file.path(path_events, simConfigParam.list$filesNames$fileEventsInfoName)
simScenario.list   <- get_simScenario(fileGridName = fileGridName, fileEventsInfoName = fileEventsInfoName)
gridParam  <- simScenario.list$gridParam
tile_sizeX <- gridParam[['X Tile Dim']]
tile_sizeY <- gridParam[['Y Tile Dim']]
# Network event data
events.dt    <- simScenario.list$events.dt
TA.dt <- fread(file.path(path_events, 'AntennaInfo_MNO_MNO1.csv'),
colClasses = c('integer', 'character', 'character', 'character', 'character', 'character', rep('numeric', 3)))[
, .(t, PhoneId, NetworkType, TA)]
TA.dt <- TA.dt[!duplicated(TA.dt, by = c('t', 'PhoneId'))]
setnames(TA.dt, c('time', 'device', 'networkType', 'TA'))
events.dt <- merge(events.dt, TA.dt, by = c('time', 'device'))[
, event := do.call(paste, c(.SD, sep = '_')), .SDcols = c('antennaID', 'TA')]
# time
t_increment <- simConfigParam.list$simConfigParameters$t_increment
# Maximum velocity
vMax_ms <- as.numeric(parameters.xml$process_parameters$geolocation$params$vmax_ms[[1]])
deviceIDs <- sort(unique(events.dt$device))
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                      SET TIME PADDING PARAMETERS                       ####
distMax  <- vMax_ms * t_increment
pad_coef <- as.integer(ceiling(distMax / max(tile_sizeX, tile_sizeY)))
pad_coef <- pad_coef + 1
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                INITIAL STATE DISTRIBUTION (PRIOR)                      ####
initialDistr_RSS_network.dt <- RSS.dt[
, watt := 10**( (RSS_ori - 30) / 10 )][
, total := sum(watt, na.rm = TRUE)][
, list(num = sum(watt, na.rm = TRUE), total = unique(total)), by = 'rasterCell'][
, prior_network := num / total][
order(rasterCell)]
prior_network <- initialDistr_RSS_network.dt$prior_network
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                          EMISSION MODEL                                ####
emissionProb_rasterCell.dt <- fread(file.path(path_eventLoc, "eventLocProb.csv"),
colClasses = c('character', 'numeric', 'numeric', 'character', 'character', 'numeric'),
sep = ',')[
tileEquiv.dt, on = 'tile'][
, c('device', 'time', 'tile') := NULL][
, TA := as.integer(TA)][
order(event_cellID, TA, rasterCell)]
setcolorder(emissionProb_rasterCell.dt, c('rasterCell', 'event_cellID', 'TA', 'eventLocProb'))
event_cellIDs <- sort(unique(emissionProb_rasterCell.dt$event_cellID))
TAs <- 0:max(emissionProb_rasterCell.dt$TA)
events_ID.dt <- as.data.table(expand.grid(event_cellID = event_cellIDs, TA = TAs))[
order(event_cellID, TA)][
, events := do.call(paste, c(.SD, sep = '_'))]
events_ID <- events_ID.dt$events
emissionProb_rasterCell.matrix <- as.matrix(
dcast(emissionProb_rasterCell.dt,
rasterCell ~ event_cellID + TA, value.var = 'eventLocProb')[
, rasterCell := NULL])
newEvents <- setdiff(events_ID, dimnames(emissionProb_rasterCell.matrix)[[2]])
emissionProb_newEvents.matrix <- matrix(
0, nrow = nrow(emissionProb_rasterCell.matrix),
ncol = length(newEvents))
colnames(emissionProb_newEvents.matrix) <- newEvents
emissionProb_rasterCell.matrix <- cbind(
emissionProb_rasterCell.matrix, emissionProb_newEvents.matrix)[, events_ID]
emissionProb_rasterCell.matrix[is.na(emissionProb_rasterCell.matrix)] <- 0
model <- HMMrectangle(nrow_grid, ncol_grid)
emissions(model) <- emissionProb_rasterCell.matrix # eventLoc for each antenna
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
#####                          TRANSITION MODEL                            #####
model <- initparams(model)  # initialize transition prob
model <- minparams(model)   # parameter reduction according to restrictions
istates(model) <- prior_network
isDiagonal <- vector('logical', length = length(deviceIDs))
names(isDiagonal) <- deviceIDs
for (devID in deviceIDs){
events_device.dt <- events.dt[
device == devID, .(device, time, event)][
order(device, time)]
events_deviceID  <- unlist(events_device.dt[, c("event")])
events_deviceID_pad <- rep(NA, pad_coef * length(events_deviceID))
events_deviceID_pad[seq(1, length(events_deviceID_pad), by = pad_coef)] <- events_deviceID
colEvents <- sapply(events_deviceID_pad,
function(x) ifelse(!is.na(x),
which (x == colnames(emissionProb_rasterCell.matrix)), NA))
model_devID <- fit(model, colEvents, init = TRUE)
mat <- model_devID$transitions
mat[2, ] <- -1 * mat[2,]
max_NonDiagonalTerm <- max(abs(model_devID$parameters$transitions[which(colSums(mat) != 0)]))
isDiagonal[devID] <- (max_NonDiagonalTerm < 1e-7)
}
names(isDiagonal)[!isDiagonal] -> devicesID_nonDiagonal
diagonal <- data.frame(device=as.integer(deviceIDs),isDiagonal)
msd.dt <- readRDS(file.path(path_data,"msd.dt.rds"))
msd_nonDiagonal.dt <- msd.dt[as.character(device)%chin%devicesID_nonDiagonal]
msd.dt <- merge(msd.dt,diagonal,by = "device", all.x=TRUE)
#Con TA
msdTA.dt <- readRDS(file.path(path_data,"msd_TA.dt.rds"))
msdTA_nonDiagonal.dt <- msdTA.dt[as.character(device)%chin%devicesID_nonDiagonal]
msdTA.dt <- merge(msdTA.dt,diagonal,by = "device", all.x=TRUE)
msd_nonDiagonalTotal.dt = rbind(msd_nonDiagonal.dt,msdTA_nonDiagonal.dt)
ggplot(msd.dt, aes(x = model, y = cp_tp / tile_size)) +
geom_boxplot(aes(fill = '')) +
theme_bw() +
labs(x = '', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '') +
theme(plot.title = element_text(hjust = 0.5, size = 18),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16), axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14), legend.text = element_text(size = 12),
legend.position = 'none')
ggplot(data = msd_nonDiagonalTotal.dt,
mapping = aes(x = model,
y = cp_tp / tile_size,
fill = method)) +
geom_boxplot() +
theme_bw() +
labs(x = '', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '')
ggplot(msd.dt, aes(x = time, y = cp_tp / tile_size, group = time)) +
geom_boxplot(aes(fill = model)) +
facet_grid(model ~ . ) +
theme_bw() +
labs(x = '\nTime (s)', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '') +
theme(plot.title = element_text(hjust = 0.5, size = 18),
axis.title.x = element_text(size = 16),axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16), axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14), legend.text = element_text(size = 12),
legend.position = 'none')
msdTotal.dt = rbind(msd.dt,msdTA.dt)
ggplot(data = msdTotal.dt,
mapping = aes(x = model,
y = cp_tp / tile_size,
fill = method)) +
geom_boxplot() +
theme_bw() +
labs(x = '', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '')
ggplot(data = msd_nonDiagonalTotal.dt,
mapping = aes(x = model,
y = cp_tp / tile_size,
fill = method)) +
geom_boxplot() +
theme_bw() +
labs(x = '', y = TeX('$b_{dt}$ (no. tiles)\n'), title = '')
path_data <- '/Users/Maria/Desktop/Root/MobileNetworkDataSimulationTemplate/data'
library(data.table)
library(ggplot2)
library(gganimate)
msd.dt <- fread(file.path(path_data, 'msdTotal.dt.csv'), sep = ',')[
, V1 := NULL][
, model := NULL]
cp_tp.dt <- dcast(msd.dt, formula = device + time + isDiagonal ~ method, value.var = 'cp_tp')
setnames(cp_tp.dt, c('RSS', 'RSS_TA'), paste0('cp_tp', c('_RSS', '_RSS_TA')))
devIDs <- unique(cp_tp.dt$device)
devID <- devIDs[143]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
cp_tp.dt <- dcast(msd.dt, formula = device + time + isDiagonal ~ method, value.var = 'cp_tp')
setnames(cp_tp.dt, c('RSS', 'RSS_TA'), paste0('cp_tp', c('_RSS', '_RSS_TA')))
devIDs <- unique(cp_tp.dt$device)
devID <- devIDs[1:25]
p <- ggplot(cp_tp.dt[device %chin% devID], aes(x = cp_tp_RSS / 250, y = cp_tp_RSS_TA / 250, color = isDiagonal)) +
geom_point(size = 2) +
geom_abline(slope = 1, intercept = 0) +
scale_x_continuous(limits = c(0, NA)) +
scale_y_continuous(limits = c(0, NA)) +
coord_fixed() +
theme_bw() +
transition_time(time) +
labs(title = "Time: {frame_time}", subtitle = paste0('Device: ', paste0(devID, collapse = ', ')))
animate(p, duration = 45, fps=1)
